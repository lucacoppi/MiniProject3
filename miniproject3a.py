# -*- coding: utf-8 -*-
"""MiniProject3a

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YXlCaEfnL76UvOJSn0gHxRSxSdk2CT--

Download the Dataset from the following link:
https://www.kaggle.com/neuromusic/avocado-prices/
"""

import pandas as pd
from google.colab import files
uploaded = files.upload()

"""Read the dataset into a Pandas DataFrame!
Does the dataset include any missing values? If so, drop them!
Hint: Pandas can do that with one line of code!
"""

df=pd.read_csv('avocado.csv')
df

df.isnull().sum().sum()

print(df[df.isna().any(axis=1)])

"""Feature Extraction
Exclude the region and date from the considered features.
"""

df1=df.drop(columns = ['Date', 'region'])
df1

"""Preprocessing
Perform any needed pre-processing on the chosen features including:
Scaling;
Encoding; and
Dealing with Nan values.
Hint:
Use only the preprocessing steps for this mini-project.
"""

from sklearn.preprocessing import OneHotEncoder

enc_df = pd.DataFrame(OneHotEncoder().fit_transform(df1[['type']]).toarray())
df2 = df1.join(enc_df)
df2

from sklearn.preprocessing import StandardScaler
df2.loc[:,['Total Volume', '4046', '4225', '4770', 'Total Bags', 'Small Bags', 'Large Bags', 'XLarge Bags', 'year']] = StandardScaler().fit_transform(df2[['Total Volume', '4046', '4225', '4770', 'Total Bags', 'Small Bags', 'Large Bags', 'XLarge Bags', 'year']])
df2

"""Split your data as follows:
80% training set
10% Validation set
10% Test set
"""

y = df2.loc[:, 'AveragePrice'].values
x = df2.iloc[:,[1,2,3,4,5,6,7,8,9,11,12,13]].values
print(x)
print(y)

from sklearn.model_selection import train_test_split

train_ratio = 0.80
validation_ratio = 0.10
test_ratio = 0.10

# train is now 80% of the entire data set
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 1 - train_ratio)

# test is now 10% of the initial data set
# validation is now 10% of the initial data set
# test size is 50%
x_val, x_test, y_val, y_test = train_test_split(x_test, y_test, test_size = test_ratio/(test_ratio + validation_ratio))

"""Training K-Nearest Neighbor (KNN) Regression
Use a K-Nearest Neighbor (KNN) regressor model to train your data.
Choose the best k for the K-Nearest Neighbor (KNN) algorithm by trying different values and validating performance on the validation set.
Regression Metrics
Print the R-squared score of your final K-Nearest Neighbor (KNN) regressor.
"""

from sklearn.neighbors import KNeighborsRegressor 
K = 2
model = KNeighborsRegressor(n_neighbors=K)
model.fit(x_train, y_train)

score = model.score(x_val,y_val)
print(score)

score1 = model.score(x_test,y_test) #R2 score
print(score1)

"""Repeat step 6 for a different regression modelling technique."""

from sklearn.svm import SVR
    reg = SVR(kernel='rbf', C = 1, gamma = 'auto')
    reg.fit(x_train, y_train)
    
    y_pred = reg.predict(x_val)
    y_pred = y_pred.reshape(-1,1)
    from sklearn.metrics import mean_squared_error
    print('MSE: ' + str(mean_squared_error(y_val,y_pred)))

    score = reg.score(x_test, y_test)
    print(score)